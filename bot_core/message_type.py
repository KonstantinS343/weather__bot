from datetime import datetime, date
import time

from bot_core.weather_api import weather_by_ip, weather_by_input, WeatherData
from bot_core.coordinates import Coordinates
from bot_core.service import take_update, insert_or_update_data_into_db, get_weather_db, get_user_location


async def get_weather_by_ip(location: Coordinates, weather_api_key: str, user_id: int) -> str:
    if not await get_user_location(user_id):
        current_weather = await weather_by_ip(location, weather_api_key)
        await insert_or_update_data_into_db(location, await get_weather(current_weather) + await get_wind_data(current_weather) + await get_sun_time(current_weather), user_id)
        return await get_weather(current_weather) + await get_wind_data(current_weather) + await get_sun_time(current_weather)

    if int(time.time()) - int((await take_update(user_id)).timestamp()) > 60:
        current_weather = await weather_by_ip(location, weather_api_key)
        await insert_or_update_data_into_db(location, await get_weather(current_weather) + await get_wind_data(current_weather) + await get_sun_time(current_weather), user_id)
        return await get_weather(current_weather) + await get_wind_data(current_weather) + await get_sun_time(current_weather)
    else:
        return await get_weather_db(user_id)


async def get_weather_by_input(weather_api_key: str, location: str) -> str:
    current_weather = await weather_by_input(location, weather_api_key)
    if not current_weather:
        return '–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑'
    return await get_weather(current_weather) + await get_wind_data(current_weather) + await get_sun_time(current_weather)


async def get_weather(current_weather: WeatherData):
    return f'<b>{current_weather.location}</b>\n'\
        f'<b>üïñ –í—Ä–µ–º—è</b>: {datetime.now().strftime("%H:%M:%S")}, {date.today().strftime("%B %d, %Y")}\n' \
        f'\n' \
        f'<i>üå§ –ü–æ–≥–æ–¥–∞</i>: {current_weather.description.capitalize()}\n'\
        f'<i>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i>: {current_weather.temperature}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current_weather.temperature_feeling}¬∞C'\
        f'\n'


async def get_wind_data(current_weather: WeatherData) -> str:
    wind_directin_ru = {'North': '–°–µ–≤–µ—Ä',
                        'Northeast': '–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫',
                        'East': '–í–æ—Å—Ç–æ–∫',
                        'Southeast': '–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫',
                        'South': '–Æ–≥',
                        'Southwest': '–Æ–≥–æ-–∑–∞–ø–∞–¥',
                        'West': '–ó–∞–ø–∞–¥',
                        'Northwest': '–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥'
                        }
    return f'\n<i>üí® –í–µ—Ç–µ—Ä: </i>\n'\
        f'<i>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:</i> {current_weather.wind_speed} –º/c\n'\
        f'<i>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞:</i> {wind_directin_ru[current_weather.wind_derection]}' \
        f'\n'


async def get_sun_time(current_weather: WeatherData) -> str:
    return f'\n<i>üåÑ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞ –≤</i> {current_weather.sunrise.strftime("%H:%M:%S")}\n'\
        f'<i>üåÖ –ó–∞—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞ –≤</i> {current_weather.sunset.strftime("%H:%M:%S")}'\
        f'\n'
